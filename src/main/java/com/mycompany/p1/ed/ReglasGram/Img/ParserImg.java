
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.p1.ed.ReglasGram.Img;

import com.mycompany.p1.ed.Nodos.NodeAVL;
import com.mycompany.p1.ed.arboles.AVL;
import com.mycompany.p1.ed.objetos.*;
import com.mycompany.p1.ed.listas.*;
import com.mycompany.p1.ed.ReglasGram.Token;
import java_cup.runtime.*;
import com.mycompany.p1.ed.ReglasGram.Img.symImg.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserImg extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symImg.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserImg() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserImg(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserImg(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\005\000\002\004\003" +
    "\000\002\004\003\000\002\005\004\000\002\005\003\000" +
    "\002\006\005\000\002\006\003\000\002\006\004\000\002" +
    "\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\010\003\007\004\006\007\004\001\002\000" +
    "\004\005\ufffb\001\002\000\010\002\027\004\006\007\004" +
    "\001\002\000\004\005\ufffc\001\002\000\010\002\ufffe\004" +
    "\ufffe\007\ufffe\001\002\000\010\002\uffff\004\uffff\007\uffff" +
    "\001\002\000\004\005\012\001\002\000\012\003\020\004" +
    "\015\006\017\007\013\001\002\000\006\006\ufff4\010\ufff4" +
    "\001\002\000\010\002\ufffd\004\ufffd\007\ufffd\001\002\000" +
    "\006\006\ufff5\010\ufff5\001\002\000\006\006\ufff7\010\ufff7" +
    "\001\002\000\010\002\ufff9\004\ufff9\007\ufff9\001\002\000" +
    "\004\010\025\001\002\000\006\006\023\010\022\001\002" +
    "\000\006\004\015\007\013\001\002\000\010\002\ufffa\004" +
    "\ufffa\007\ufffa\001\002\000\006\006\ufff8\010\ufff8\001\002" +
    "\000\006\006\ufff6\010\ufff6\001\002\000\010\002\000\004" +
    "\000\007\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\010\002\004\003\007\004\010\001\001\000" +
    "\002\001\001\000\006\003\025\004\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\013\006\020\007\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserImg$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserImg$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserImg$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private List<String> listaErrores;
	private AVL treeCapas;
	private ListCircular listaImagenes;
	private ListSimple lista;
	private Imagen img; 

	public ParserImg(LexerImg lex, AVL capas){
		super(lex);
		listaErrores = new ArrayList<String>();
		treeCapas = capas;
		listaImagenes = new ListCircular();
		lista = new ListSimple();
		img = new Imagen();
	}
	public void syntax_error(Symbol cur_token){
			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
            Token token = (Token) cur_token.value;
			String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+cur_token.left+", Columna: "+ cur_token.right +" }" ;
			listaErrores.add(msgError);
	}

	public void report_fatal_error(String message, Object info){
			String Elerror = "Error Irrecuperable: " + message + " -> {objeto: " + info + "}";
			listaErrores.add(Elerror);	
	}

	public List getListaErrores(){
		return listaErrores;
	}
	public ListCircular getListImgs(){
		return listaImagenes;
	}

	protected int error_sync_size(){
		return 1;
	}
	private void insertarImagenes(){
		try{
			img.setListaCapas(lista);
			listaImagenes.add(img);
		}catch(Exception e){
			//System.out.println("error al insertar la imagen: " + e.getMessage());
		}
		img = new Imagen();
		lista =  new ListSimple();
	}
	private void verificarCapa(Token Tokencapa){
		String idCapa = Tokencapa.getLexema();
		if(treeCapas != null){
			NodeAVL capa =  treeCapas.find(idCapa);
			if(capa != null){
				lista.add(idCapa);
			}else{
				System.out.println("no esta la capa: " + idCapa);
			}
		}else{
			System.out.println("No hay ninguna capa cargada");
		}
		
	}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserImg$actions {
  private final ParserImg parser;

  /** Constructor */
  CUP$ParserImg$actions(ParserImg parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserImg$do_action_part00000000(
    int                        CUP$ParserImg$act_num,
    java_cup.runtime.lr_parser CUP$ParserImg$parser,
    java.util.Stack            CUP$ParserImg$stack,
    int                        CUP$ParserImg$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserImg$result;

      /* select the action based on the action number */
      switch (CUP$ParserImg$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= imagenes EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)).value;
		RESULT = start_val;
              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserImg$parser.done_parsing();
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // imagenes ::= imagenes imagen 
            {
              Token RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("imagenes",0, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // imagenes ::= imagen 
            {
              Token RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("imagenes",0, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // imagenes ::= error 
            {
              Token RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("imagenes",0, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // imagen ::= idImg LLAI imagen_sig 
            {
              Token RESULT =null;
		insertarImagenes();
              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("imagen",1, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // idImg ::= STRING 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$ParserImg$stack.peek()).value;
		img.setId(s.getLexema());
              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("idImg",2, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // idImg ::= NUMERO 
            {
              Token RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$ParserImg$stack.peek()).value;
		img.setId(n.getLexema());
              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("idImg",2, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // imagen_sig ::= capas LLAD 
            {
              Token RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("imagen_sig",3, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // imagen_sig ::= LLAD 
            {
              Token RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("imagen_sig",3, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // capas ::= capas COMA capa 
            {
              Token RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("capas",4, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // capas ::= capa 
            {
              Token RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("capas",4, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // capas ::= error COMA 
            {
              Token RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("capas",4, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // capa ::= STRING 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$ParserImg$stack.peek()).value;
		verificarCapa(s);
              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("capa",5, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // capa ::= NUMERO 
            {
              Token RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$ParserImg$stack.peek()).value;
		verificarCapa(n);
              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("capa",5, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserImg$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserImg$do_action(
    int                        CUP$ParserImg$act_num,
    java_cup.runtime.lr_parser CUP$ParserImg$parser,
    java.util.Stack            CUP$ParserImg$stack,
    int                        CUP$ParserImg$top)
    throws java.lang.Exception
    {
              return CUP$ParserImg$do_action_part00000000(
                               CUP$ParserImg$act_num,
                               CUP$ParserImg$parser,
                               CUP$ParserImg$stack,
                               CUP$ParserImg$top);
    }
}

}
